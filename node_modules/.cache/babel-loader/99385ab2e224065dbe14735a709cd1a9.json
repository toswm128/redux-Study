{"ast":null,"code":"import { createStore } from \"redux\"; //type\n\nconst ADD = \"ADD\";\nconst DELETE = \"DELETE\"; //action creater\n\nconst addToDo = text => {\n  return {\n    type: ADD,\n    text\n  };\n};\n\nconst deleteToDo = id => {\n  return {\n    type: DELETE,\n    id\n  };\n};\n\nconst USERADD = \"USERADD\";\nconst USERCHECK = \"USERCHECK\"; //action creater\n\nconst userAdd = (userId, userPwd, userName) => {\n  return {\n    type: USERADD,\n    userId,\n    userPwd,\n    userName\n  };\n};\n\nconst userCheck = (userId, userPwd) => {\n  return {\n    type: USERCHECK,\n    userId,\n    userPwd\n  };\n}; //reducer\n\n\nconst reducer = (state = {\n  todo: [],\n  user: []\n}, action) => {\n  switch (action.type) {\n    case ADD:\n      return {\n        todo: [...state.todo, {\n          text: action.text,\n          id: Date.now()\n        }],\n        user: [...state.user]\n      };\n\n    case DELETE:\n      return {\n        todo: state.todo.filter(toDo => toDo.id !== action.id),\n        user: [...state.user]\n      };\n\n    case USERADD:\n      return {\n        todo: [...state.todo],\n        user: [...state.user, {\n          userId: action.userid,\n          userPwd: action.userPwd,\n          userName: action.userName\n        }]\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Authreduser = (State = [], action) => {\n  switch (action.type) {\n    case USERCHECK:\n      return [...State];\n\n    default:\n      break;\n  }\n}; //store\n\n\n_c = Authreduser;\nconst store = createStore(reducer, Authreduser);\nexport const actionCreater = {\n  addToDo,\n  deleteToDo,\n  userAdd\n};\nexport default store;\n\nvar _c;\n\n$RefreshReg$(_c, \"Authreduser\");","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/redux-Study/src/store.js"],"names":["createStore","ADD","DELETE","addToDo","text","type","deleteToDo","id","USERADD","USERCHECK","userAdd","userId","userPwd","userName","userCheck","reducer","state","todo","user","action","Date","now","filter","toDo","userid","Authreduser","State","store","actionCreater"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B,C,CAEA;;AACA,MAAMC,GAAG,GAAG,KAAZ;AACA,MAAMC,MAAM,GAAG,QAAf,C,CAEA;;AACA,MAAMC,OAAO,GAAGC,IAAI,IAAI;AACtB,SAAO;AACLC,IAAAA,IAAI,EAAEJ,GADD;AAELG,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAME,UAAU,GAAGC,EAAE,IAAI;AACvB,SAAO;AACLF,IAAAA,IAAI,EAAEH,MADD;AAELK,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,SAAS,GAAG,WAAlB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAACC,MAAD,EAASC,OAAT,EAAkBC,QAAlB,KAA+B;AAC7C,SAAO;AACLR,IAAAA,IAAI,EAAEG,OADD;AAELG,IAAAA,MAFK;AAGLC,IAAAA,OAHK;AAILC,IAAAA;AAJK,GAAP;AAMD,CAPD;;AASA,MAAMC,SAAS,GAAG,CAACH,MAAD,EAASC,OAAT,KAAqB;AACrC,SAAO;AACLP,IAAAA,IAAI,EAAEI,SADD;AAELE,IAAAA,MAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD,CAND,C,CAQA;;;AACA,MAAMG,OAAO,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,IAAI,EAAE,EAAR;AAAYC,EAAAA,IAAI,EAAE;AAAlB,CAAT,EAAiCC,MAAjC,KAA4C;AAC1D,UAAQA,MAAM,CAACd,IAAf;AACE,SAAKJ,GAAL;AACE,aAAO;AACLgB,QAAAA,IAAI,EAAE,CAAC,GAAGD,KAAK,CAACC,IAAV,EAAgB;AAAEb,UAAAA,IAAI,EAAEe,MAAM,CAACf,IAAf;AAAqBG,UAAAA,EAAE,EAAEa,IAAI,CAACC,GAAL;AAAzB,SAAhB,CADD;AAELH,QAAAA,IAAI,EAAE,CAAC,GAAGF,KAAK,CAACE,IAAV;AAFD,OAAP;;AAIF,SAAKhB,MAAL;AACE,aAAO;AACLe,QAAAA,IAAI,EAAED,KAAK,CAACC,IAAN,CAAWK,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAAChB,EAAL,KAAYY,MAAM,CAACZ,EAA7C,CADD;AAELW,QAAAA,IAAI,EAAE,CAAC,GAAGF,KAAK,CAACE,IAAV;AAFD,OAAP;;AAIF,SAAKV,OAAL;AACE,aAAO;AACLS,QAAAA,IAAI,EAAE,CAAC,GAAGD,KAAK,CAACC,IAAV,CADD;AAELC,QAAAA,IAAI,EAAE,CACJ,GAAGF,KAAK,CAACE,IADL,EAEJ;AACEP,UAAAA,MAAM,EAAEQ,MAAM,CAACK,MADjB;AAEEZ,UAAAA,OAAO,EAAEO,MAAM,CAACP,OAFlB;AAGEC,UAAAA,QAAQ,EAAEM,MAAM,CAACN;AAHnB,SAFI;AAFD,OAAP;;AAWF;AACE,aAAOG,KAAP;AAxBJ;AA0BD,CA3BD;;AA6BA,MAAMS,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaP,MAAb,KAAwB;AAC1C,UAAQA,MAAM,CAACd,IAAf;AACE,SAAKI,SAAL;AACE,aAAO,CAAC,GAAGiB,KAAJ,CAAP;;AAEF;AACE;AALJ;AAOD,CARD,C,CAUA;;;KAVMD,W;AAWN,MAAME,KAAK,GAAG3B,WAAW,CAACe,OAAD,EAAUU,WAAV,CAAzB;AAEA,OAAO,MAAMG,aAAa,GAAG;AAC3BzB,EAAAA,OAD2B;AAE3BG,EAAAA,UAF2B;AAG3BI,EAAAA;AAH2B,CAAtB;AAKP,eAAeiB,KAAf","sourcesContent":["import { createStore } from \"redux\";\n\n//type\nconst ADD = \"ADD\";\nconst DELETE = \"DELETE\";\n\n//action creater\nconst addToDo = text => {\n  return {\n    type: ADD,\n    text,\n  };\n};\n\nconst deleteToDo = id => {\n  return {\n    type: DELETE,\n    id,\n  };\n};\n\nconst USERADD = \"USERADD\";\nconst USERCHECK = \"USERCHECK\";\n\n//action creater\nconst userAdd = (userId, userPwd, userName) => {\n  return {\n    type: USERADD,\n    userId,\n    userPwd,\n    userName,\n  };\n};\n\nconst userCheck = (userId, userPwd) => {\n  return {\n    type: USERCHECK,\n    userId,\n    userPwd,\n  };\n};\n\n//reducer\nconst reducer = (state = { todo: [], user: [] }, action) => {\n  switch (action.type) {\n    case ADD:\n      return {\n        todo: [...state.todo, { text: action.text, id: Date.now() }],\n        user: [...state.user],\n      };\n    case DELETE:\n      return {\n        todo: state.todo.filter(toDo => toDo.id !== action.id),\n        user: [...state.user],\n      };\n    case USERADD:\n      return {\n        todo: [...state.todo],\n        user: [\n          ...state.user,\n          {\n            userId: action.userid,\n            userPwd: action.userPwd,\n            userName: action.userName,\n          },\n        ],\n      };\n    default:\n      return state;\n  }\n};\n\nconst Authreduser = (State = [], action) => {\n  switch (action.type) {\n    case USERCHECK:\n      return [...State];\n\n    default:\n      break;\n  }\n};\n\n//store\nconst store = createStore(reducer, Authreduser);\n\nexport const actionCreater = {\n  addToDo,\n  deleteToDo,\n  userAdd,\n};\nexport default store;\n"]},"metadata":{},"sourceType":"module"}