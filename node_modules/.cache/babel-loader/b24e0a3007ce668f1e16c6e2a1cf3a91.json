{"ast":null,"code":"import { createStore } from \"redux\"; //type\n\nconst ADD = \"ADD\";\nconst DELETE = \"DELETE\"; //action creater\n\nconst addToDo = text => {\n  return {\n    type: ADD,\n    text\n  };\n};\n\nconst deleteToDo = id => {\n  return {\n    type: DELETE,\n    id\n  };\n};\n\nconst USERADD = \"USERADD\";\nconst USERCHECK = \"USERCHECK\"; //action creater\n\nconst userAdd = (userId, userPwd, userName) => {\n  return {\n    type: USERADD,\n    userId,\n    userPwd,\n    userName\n  };\n};\n\nconst userCheck = (userId, userPwd) => {\n  return {\n    type: USERCHECK,\n    userId,\n    userPwd\n  };\n}; //reducer\n\n\nconst reducer = (state = {\n  todo: [],\n  user: [],\n  userInfo: {}\n}, action) => {\n  switch (action.type) {\n    case ADD:\n      return {\n        todo: [...state.todo, {\n          text: action.text,\n          id: Date.now()\n        }],\n        user: [...state.user]\n      };\n\n    case DELETE:\n      return {\n        todo: state.todo.filter(toDo => toDo.id !== action.id),\n        user: [...state.user]\n      };\n\n    case USERADD:\n      return {\n        todo: [...state.todo],\n        user: [...state.user, {\n          userId: action.userId,\n          userPwd: action.userPwd,\n          userName: action.userName\n        }],\n        userInfo: {\n          userId: state.userInfo.userId,\n          userName: state.userInfo.username\n        }\n      };\n\n    case USERCHECK:\n      let key;\n\n      try {\n        state.user.map((current, index) => {\n          if (current.userId === action.userId && current.userPwd === action.userPwd) {\n            key = index;\n            console.log(\"로그인 성공\");\n          }\n        });\n        return {\n          todo: [...state.todo],\n          user: [...state.user],\n          userInfo: {\n            userId: state.user[key].userId,\n            userName: state.user[key].userName\n          }\n        };\n      } catch (error) {\n        console.log(\"로그인 실패\");\n      }\n\n    default:\n      return state;\n  }\n}; // const Authreduser = (State = [], action) => {\n//   console.log(action);\n//   switch (action.type) {\n//     case USERCHECK:\n//       return [...State, { a: action.userId, b: action.userPwd }];\n//     default:\n//       break;\n//   }\n// };\n//store\n\n\nconst store = createStore(reducer);\nexport const actionCreater = {\n  addToDo,\n  deleteToDo,\n  userAdd,\n  userCheck\n};\nexport default store;","map":{"version":3,"sources":["/Users/macbook/Documents/GitHub/redux-Study/src/store.js"],"names":["createStore","ADD","DELETE","addToDo","text","type","deleteToDo","id","USERADD","USERCHECK","userAdd","userId","userPwd","userName","userCheck","reducer","state","todo","user","userInfo","action","Date","now","filter","toDo","username","key","map","current","index","console","log","error","store","actionCreater"],"mappings":"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","sourcesContent":["import { createStore } from \"redux\";\n\n//type\nconst ADD = \"ADD\";\nconst DELETE = \"DELETE\";\n\n//action creater\nconst addToDo = text => {\n  return {\n    type: ADD,\n    text,\n  };\n};\n\nconst deleteToDo = id => {\n  return {\n    type: DELETE,\n    id,\n  };\n};\n\nconst USERADD = \"USERADD\";\nconst USERCHECK = \"USERCHECK\";\n\n//action creater\nconst userAdd = (userId, userPwd, userName) => {\n  return {\n    type: USERADD,\n    userId,\n    userPwd,\n    userName,\n  };\n};\n\nconst userCheck = (userId, userPwd) => {\n  return {\n    type: USERCHECK,\n    userId,\n    userPwd,\n  };\n};\n\n//reducer\nconst reducer = (state = { todo: [], user: [], userInfo: {} }, action) => {\n  switch (action.type) {\n    case ADD:\n      return {\n        todo: [...state.todo, { text: action.text, id: Date.now() }],\n        user: [...state.user],\n      };\n    case DELETE:\n      return {\n        todo: state.todo.filter(toDo => toDo.id !== action.id),\n        user: [...state.user],\n      };\n    case USERADD:\n      return {\n        todo: [...state.todo],\n        user: [\n          ...state.user,\n          {\n            userId: action.userId,\n            userPwd: action.userPwd,\n            userName: action.userName,\n          },\n        ],\n        userInfo: {\n          userId: state.userInfo.userId,\n          userName: state.userInfo.username,\n        },\n      };\n\n    case USERCHECK:\n      let key;\n      try {\n        state.user.map((current, index) => {\n          if (\n            current.userId === action.userId &&\n            current.userPwd === action.userPwd\n          ) {\n            key = index;\n            console.log(\"로그인 성공\");\n          }\n        });\n        return {\n          todo: [...state.todo],\n          user: [...state.user],\n          userInfo: {\n            userId: state.user[key].userId,\n            userName: state.user[key].userName,\n          },\n        };\n      } catch (error) {\n        console.log(\"로그인 실패\");\n      }\n    default:\n      return state;\n  }\n};\n\n// const Authreduser = (State = [], action) => {\n//   console.log(action);\n//   switch (action.type) {\n//     case USERCHECK:\n//       return [...State, { a: action.userId, b: action.userPwd }];\n\n//     default:\n//       break;\n//   }\n// };\n\n//store\nconst store = createStore(reducer);\n\nexport const actionCreater = {\n  addToDo,\n  deleteToDo,\n  userAdd,\n  userCheck,\n};\nexport default store;\n"]},"metadata":{},"sourceType":"module"}